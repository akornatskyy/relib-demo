<configuration>
    <configSections>
        <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" requirePermission="false" />
    </configSections>
    <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
        <namespace name="Tickets.Interface.WorkItem"/>
        <namespace name="Tickets.Module.Repository.Mock"/>
        <namespace name="ReusableLibrary.Abstractions.Bootstrapper"/>
        <namespace name="ReusableLibrary.Abstractions.Threading"/>
        <namespace name="ReusableLibrary.Abstractions.WorkItem"/>
        <namespace name="ReusableLibrary.Abstractions.Services"/>
        <namespace name="ReusableLibrary.Host"/>
        <namespace name="System"/>
        <assembly name="Tickets.Interface"/>
        <assembly name="Tickets.Module"/>
        <assembly name="ReusableLibrary.Abstractions"/>
        <assembly name="ReusableLibrary.Host"/>
        <!-- Lifetime Managers -->
        <alias alias="Singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
        <alias alias="PerThread" type="Microsoft.Practices.Unity.PerThreadLifetimeManager, Microsoft.Practices.Unity"/>
        <alias alias="WorkItem" type="ReusableLibrary.Unity.WorkItemLifetimeManager, ReusableLibrary.Unity"/>
        <alias alias="External" type="Microsoft.Practices.Unity.ExternallyControlledLifetimeManager, Microsoft.Practices.Unity" />
        <container>
            <!--
        
            Configuration Settings
            
            -->
            <!-- 
        
            Application 
            
            -->
            <register type="IApplication" mapTo="TimeoutApplication">
                <lifetime type="Singleton"/>
                <constructor>
                    <param name="name" type="string">
                        <value value ="Tickets Background Processing" />
                    </param>
                    <param name="upTimeInSeconds" type="int">
                        <value value="10" />
                    </param>
                </constructor>
            </register>
            <!-- 
        
            Bootstrapper / Background Tasks 
            
            -->
            <register name="StartStopwatch" type="IStartupTask" mapTo="StopwatchTask">
                <lifetime type="Singleton"/>
            </register>
            <register name="StartBackgroundTasks" type="IStartupTask" mapTo="StartBackgroundTasks">
                <lifetime type="Singleton"/>
            </register>
            <register name="WaitBackgroundTasks" type="IShutdownTask" mapTo="WaitBackgroundTasks">
                <lifetime type="Singleton"/>
                <constructor>
                    <param name="tasks" type="IBackgroundTask[]" />
                    <param name="waitDuration" type="TimeSpan">
                        <value value="00:00:05" />
                    </param>
                </constructor>
            </register>
            <register name="Task1" type="IBackgroundTask" mapTo="WorkItemBackgroundTask">
                <lifetime type="Singleton"/>
                <constructor>
                    <param name="workItemName" type="string">
                        <value value="EscalateOverdueTicketWorkItem" />
                    </param>
                </constructor>
                <property name="WorkItemTimeBreak">
                    <value value="00:00:00.750" />
                </property>
            </register>
            <register name="Task2" type="IBackgroundTask" mapTo="WorkItemBackgroundTask">
                <lifetime type="Singleton"/>
                <constructor>
                    <param name="workItemName" type="string">
                        <value value="EscalateOverdueTicketWorkItem" />
                    </param>
                </constructor>
                <property name="WorkItemTimeBreak">
                    <value value="00:00:00.750" />
                </property>
            </register>
            <register name="StopStopwatch" type="IShutdownTask" mapTo="StopwatchTask">
                <lifetime type="Singleton"/>
            </register>
            <!-- 
        
            Work Items 
            
            -->
            <register name="EscalateOverdueTicketWorkItem" type="IWorkItem" mapTo="EscalateOverdueTicketWorkItem">
                <lifetime type="WorkItem" />
                <property name="UnitOfWorkName">
                    <value value="Tickets" />
                </property>
                <property name="BackgroundRepository" />
                <property name="TicketRepository" />
                <property name="MembershipRepository" />
            </register>
            <!-- 
        
            Models 
            
            -->
        </container>
    </unity>
</configuration>